"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const deepFreeze_1 = require("./deepFreeze");
const deepFreeze = new deepFreeze_1.DeepFreeze();
const restriction_1 = require("./restriction");
exports.restrict = (() => {
    const primitive = {
        string: new restriction_1.Restriction("Must be a 'string'", (v) => typeof v === "string"),
        number: new restriction_1.Restriction("Must be a 'number'", (v) => typeof v === "number"),
        bigint: new restriction_1.Restriction("Must be a 'bigint'", (v) => typeof v === "bigint"),
        boolean: new restriction_1.Restriction("Must be a 'boolean'", (v) => typeof v === "boolean"),
        null: new restriction_1.Restriction("Must be null", (v) => v === null),
        undefined: new restriction_1.Restriction("Must be 'undefined'", (v) => typeof v === "undefined"),
        symbol: new restriction_1.Restriction("Must be a 'symbol'", (v) => typeof v === "symbol")
    };
    const equality = {
        eq: (target) => new restriction_1.Restriction("Must be strictly equal to " + target, (v) => v === target),
        neq: (target) => new restriction_1.Restriction("Must not be strictly equal to " + target, (v) => v !== target)
    };
    const range = {
        integer: new restriction_1.Restriction("Must be an integer", (v) => {
            if (typeof v === "bigint") {
                return true;
            }
            else if (typeof v === "number") {
                return Math.floor(v) === v;
            }
            else {
                return false;
            }
        }),
        gt: (bound) => {
            if (typeof bound === "number" || typeof bound === "bigint") {
                return new restriction_1.Restriction(`Must be a '${typeof bound}' greater than ${bound}`, (v) => typeof v === typeof bound && v > bound);
            }
            else {
                throw new Error("[restrict-v] Invalid Argument: restrict.gt creation requires a " +
                    "bound of type 'number' or 'bigint'");
            }
        },
        lt: (bound) => {
            if (typeof bound === "number" || typeof bound === "bigint") {
                return new restriction_1.Restriction(`Must be a '${typeof bound}' less than ${bound}`, (v) => typeof v === typeof bound && v < bound);
            }
            else {
                throw new Error("[restrict-v] Invalid Argument: restrict.lt creation requires " +
                    "a bound of type 'number' or 'bigint'");
            }
        },
        gte: (bound) => {
            if (typeof bound === "number" || typeof bound === "bigint") {
                return new restriction_1.Restriction(`Must be a '${typeof bound}' greater than or equal to ${bound}`, (v) => typeof v === typeof bound && v >= bound);
            }
            else {
                throw new Error("[restrict-v] Invalid Argument: restrict.gte creation requires " +
                    "a bound of type 'number' or 'bigint'");
            }
        },
        lte: (bound) => {
            if (typeof bound === "number" || typeof bound === "bigint") {
                return new restriction_1.Restriction(`Must be a '${typeof bound}' less than or equal to ${bound}`, (v) => typeof v === typeof bound && v <= bound);
            }
            else {
                throw new Error("[restrict-v] Invalid Argument: restrict.lte creation requires " +
                    "a bound of type 'number' or 'bigint'");
            }
        },
        range: (lower, upper, lowerInclusive = true, upperInclusive = false) => {
            if (typeof lower === typeof upper &&
                (typeof lower === "number" || typeof lower === "bigint")) {
                return new restriction_1.Restriction(`Must be a '${typeof lower}' within the range ${lowerInclusive ? "[" : "("}${lower}, ${upper}${upperInclusive ? "]" : ")"}`, lowerInclusive ? range.gte(lower) : range.gt(lower), upperInclusive ? range.lte(upper) : range.lt(upper));
            }
            else {
                throw new Error("[restrict-v] Invalid Argument: restrict.range creation requires " +
                    "same-typed lower and upper bounds of type 'number' or 'bigint'");
            }
        }
    };
    const rangePresets = {
        positive: range
            .gte(0)
            .or(range.gte(BigInt(0)))
            .msg("Must be a positive 'number' or 'bigint'"),
        negative: range
            .lt(0)
            .or(range.lt(BigInt(0)))
            .msg("Must be a negative 'number' or 'bigint'")
    };
    const instances = {
        Object: new restriction_1.Restriction("Must be an instance of Object", (v) => v instanceof Object),
        Array: new restriction_1.Restriction("Must be an instance of Array", (v) => v instanceof Array),
        instanceof: (instance) => new restriction_1.Restriction(`Must be an instance of ${instance.name}`, (value) => value instanceof instance)
    };
    const strings = {
        match: (matcher) => {
            if (matcher instanceof RegExp) {
                return primitive.string.and("Must be a 'string' matching " + matcher.toString(), (v) => v.match(matcher));
            }
            else if (typeof matcher === "string") {
                return primitive.string.and("Must be a 'string' matching '" + matcher + "'", (v) => v.match(matcher));
            }
            else {
                throw Error("[restrict-v] Invalid Argument: Must supply a string or RegExp " +
                    "instance for restrict.match creation");
            }
        }
    };
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, primitive), equality), range), rangePresets), instances), strings);
})();
deepFreeze(this);
//# sourceMappingURL=data:application/json;base64,