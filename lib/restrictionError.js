"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const deepFreeze_1 = require("./deepFreeze");
const deepFreeze = new deepFreeze_1.DeepFreeze();
class RestrictionError extends Error {
    constructor(options) {
        super(options.message === undefined
            ? "Value Restriction Failure"
            : options.message);
        Object.setPrototypeOf(this, RestrictionError.prototype);
        Object.defineProperty(this, "name", {
            value: "RestrictionError",
            writable: true,
            enumerable: false,
            configurable: true
        });
        this.code = "ERR_RESTRICTION";
        this.messageStack =
            options.sourceErr !== undefined &&
                options.sourceErr instanceof RestrictionError
                ? options.sourceErr.messageStack.concat([this.message])
                : [this.message];
        if (this.stack !== undefined) {
            this.stack = this.stack.replace(/^(RestrictionError)/m, "$1 [ERR_RESTRICTION]");
        }
        this.value = options.value;
        this.root = options.root !== undefined ? options.root : options.value;
        deepFreeze(this);
    }
}
exports.RestrictionError = RestrictionError;
deepFreeze(this);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdHJpY3Rpb25FcnJvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXN0cmljdGlvbkVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBcUNBLDZDQUEwQztBQUMxQyxNQUFNLFVBQVUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztBQUtwQyxNQUFhLGdCQUFvQixTQUFRLEtBQUs7SUFLN0MsWUFBWSxPQUtYO1FBQ0EsS0FBSyxDQUNKLE9BQU8sQ0FBQyxPQUFPLEtBQUssU0FBUztZQUM1QixDQUFDLENBQUMsMkJBQTJCO1lBQzdCLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUNsQixDQUFDO1FBQ0YsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFO1lBQ25DLEtBQUssRUFBRSxrQkFBa0I7WUFDekIsUUFBUSxFQUFFLElBQUk7WUFDZCxVQUFVLEVBQUUsS0FBSztZQUNqQixZQUFZLEVBQUUsSUFBSTtTQUNsQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBQzlCLElBQUksQ0FBQyxZQUFZO1lBQ2hCLE9BQU8sQ0FBQyxTQUFTLEtBQUssU0FBUztnQkFDL0IsT0FBTyxDQUFDLFNBQVMsWUFBWSxnQkFBZ0I7Z0JBQzVDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuQixJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO1lBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQzlCLHNCQUFzQixFQUN0QixzQkFBc0IsQ0FDdEIsQ0FBQztTQUNGO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDdEUsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUM7Q0FDRDtBQXZDRCw0Q0F1Q0M7QUFFRCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgcmVzdHJpY3QtdlxuICovXG5cbi8qKlxuICogQGF1dGhvciAgSnVzdGluIENvbGxpZXIgPGpwY3hpc3RAZ21haWwuY29tPlxuICogQGxpY2Vuc2UgR1BMLTMuMC1vci1sYXRlclxuICogQHNlZSB7QGxpbmsgaHR0cDovL2dpdGh1Yi5jb20vanBjeC9yZXN0cmljdC12fEdpdEh1Yn1cbiAqL1xuXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fICAgICAgICAgLl9fICAgICAgICBfXyAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICBfX19fX19fICAgX19fXyAgIF9fX19fX18vICB8X19fX19fX198X198IF9fX19fLyAgfF8gICAgICAgICAgX19fICBfXyAgICAqXG4gKiAgICBcXF8gIF9fIFxcXy8gX18gXFwgLyAgX19fL1xcICAgX19cXF8gIF9fIFxcICB8LyBfX19cXCAgIF9fXFwgIF9fX19fXyBcXCAgXFwvIC8gICAgKlxuICogICAgIHwgIHwgXFwvXFwgIF9fXy8gXFxfX18gXFwgIHwgIHwgIHwgIHwgXFwvICBcXCAgXFxfX198ICB8ICAgL19fX19fLyAgXFwgICAvICAgICAqXG4gKiAgICAgfF9ffCAgICBcXF9fXyAgPl9fX18gID4gfF9ffCAgfF9ffCAgfF9ffFxcX19fICA+X198ICAgICAgICAgICAgIFxcXy8gICAgICAqXG4gKiAgICAgICAgICAgICAgICAgXFwvICAgICBcXC8gICAgICAgICAgICAgICAgICAgICAgXFwvICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBSdW50aW1lIFZhbHVlIFJlc3RyaWN0b3IgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICAqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgICAgICAqXG4gKiAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgICAgICAqXG4gKiAgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IgICAgICAgICAqXG4gKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsICAgICAgICAgICAqXG4gKiAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGludGVybmFsaWVkIHdhcnJhbnR5IG9mICAgICAgICAqXG4gKiAgTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSAgICAgICAgICAgICAqXG4gKiAgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgICAgICAgICAqXG4gKiAgYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LiAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG5pbXBvcnQgeyBEZWVwRnJlZXplIH0gZnJvbSBcIi4vZGVlcEZyZWV6ZVwiO1xuY29uc3QgZGVlcEZyZWV6ZSA9IG5ldyBEZWVwRnJlZXplKCk7XG5cbi8qLi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0sXG4gLyAgICAgICAgICAgICAgICAgICAgICAgICAgW2NsYXNzLlJlc3RyaWN0aW9uRXJyb3JdICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbmV4cG9ydCBjbGFzcyBSZXN0cmljdGlvbkVycm9yPFQ+IGV4dGVuZHMgRXJyb3Ige1xuXHRwdWJsaWMgdmFsdWU6IFQ7XG5cdHB1YmxpYyByb290OiBhbnk7XG5cdHB1YmxpYyBjb2RlOiBzdHJpbmc7XG5cdHB1YmxpYyBtZXNzYWdlU3RhY2s6IHN0cmluZ1tdO1xuXHRjb25zdHJ1Y3RvcihvcHRpb25zOiB7XG5cdFx0dmFsdWU6IFQ7XG5cdFx0cm9vdD86IGFueTtcblx0XHRtZXNzYWdlPzogc3RyaW5nO1xuXHRcdHNvdXJjZUVycj86IFJlc3RyaWN0aW9uRXJyb3I8YW55Pjtcblx0fSkge1xuXHRcdHN1cGVyKFxuXHRcdFx0b3B0aW9ucy5tZXNzYWdlID09PSB1bmRlZmluZWRcblx0XHRcdFx0PyBcIlZhbHVlIFJlc3RyaWN0aW9uIEZhaWx1cmVcIlxuXHRcdFx0XHQ6IG9wdGlvbnMubWVzc2FnZVxuXHRcdCk7XG5cdFx0T2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlc3RyaWN0aW9uRXJyb3IucHJvdG90eXBlKTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcblx0XHRcdHZhbHVlOiBcIlJlc3RyaWN0aW9uRXJyb3JcIixcblx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHR9KTtcblx0XHR0aGlzLmNvZGUgPSBcIkVSUl9SRVNUUklDVElPTlwiO1xuXHRcdHRoaXMubWVzc2FnZVN0YWNrID1cblx0XHRcdG9wdGlvbnMuc291cmNlRXJyICE9PSB1bmRlZmluZWQgJiZcblx0XHRcdG9wdGlvbnMuc291cmNlRXJyIGluc3RhbmNlb2YgUmVzdHJpY3Rpb25FcnJvclxuXHRcdFx0XHQ/IG9wdGlvbnMuc291cmNlRXJyLm1lc3NhZ2VTdGFjay5jb25jYXQoW3RoaXMubWVzc2FnZV0pXG5cdFx0XHRcdDogW3RoaXMubWVzc2FnZV07XG5cdFx0aWYgKHRoaXMuc3RhY2sgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zdGFjayA9IHRoaXMuc3RhY2sucmVwbGFjZShcblx0XHRcdFx0L14oUmVzdHJpY3Rpb25FcnJvcikvbSxcblx0XHRcdFx0XCIkMSBbRVJSX1JFU1RSSUNUSU9OXVwiXG5cdFx0XHQpO1xuXHRcdH1cblx0XHR0aGlzLnZhbHVlID0gb3B0aW9ucy52YWx1ZTtcblx0XHR0aGlzLnJvb3QgPSBvcHRpb25zLnJvb3QgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMucm9vdCA6IG9wdGlvbnMudmFsdWU7XG5cdFx0ZGVlcEZyZWV6ZSh0aGlzKTtcblx0fVxufVxuXG5kZWVwRnJlZXplKHRoaXMpO1xuIl19