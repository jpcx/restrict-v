"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class DeepFreeze extends Function {
    constructor() {
        super();
        const globalThisWhitelist = (() => {
            const wl = new WeakSet();
            const q = [globalThis];
            while (q.length) {
                const cur = q.pop();
                if (cur instanceof Object && !wl.has(cur)) {
                    wl.add(cur);
                    q.push(Object.getPrototypeOf(cur));
                    Object.values(Object.getOwnPropertyDescriptors(cur))
                        .reduce((a, v) => a.concat(Object.values(v)), [])
                        .forEach(x => q.push(x));
                }
            }
            return wl;
        })();
        const self = freezeRoot => {
            if (!(freezeRoot instanceof Object)) {
                return freezeRoot;
            }
            const visited = new WeakSet();
            const q = [freezeRoot];
            while (q.length) {
                const cur = q.pop();
                if (cur instanceof Object && !visited.has(cur)) {
                    visited.add(cur);
                    if (!globalThisWhitelist.has(cur)) {
                        Object.freeze(cur);
                    }
                    q.push(Object.getPrototypeOf(cur));
                    Object.values(Object.getOwnPropertyDescriptors(cur))
                        .reduce((a, v) => a.concat(Object.values(v)), [])
                        .forEach(x => q.push(x));
                }
            }
            if (!globalThisWhitelist.has(freezeRoot)) {
                Object.freeze(freezeRoot);
            }
            return freezeRoot;
        };
        return Object.freeze(Object.setPrototypeOf(self, DeepFreeze.prototype));
    }
}
exports.DeepFreeze = DeepFreeze;
//# sourceMappingURL=data:application/json;base64,